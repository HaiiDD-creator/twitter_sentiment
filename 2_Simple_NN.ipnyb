{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"2_Simple_NN.ipnyb","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1qsgy6H_ouWp8rGfE54G0ONfxcv1m8h-S","authorship_tag":"ABX9TyNOOWz1gXhJiy7Rix+TaI9g"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"5R4mLaolzHm_"},"source":["# Imports"]},{"cell_type":"code","metadata":{"id":"qMiy8hf5y6Oh","executionInfo":{"status":"ok","timestamp":1602558598610,"user_tz":-180,"elapsed":2451,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["import pandas as pd\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import confusion_matrix, classification_report\n","\n","import matplotlib.pyplot as plt\n","\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.utils import np_utils\n","from keras.models import Sequential\n","from keras import layers\n","from keras.wrappers.scikit_learn import KerasClassifier"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wsV9LpsB1kDd"},"source":["# Data"]},{"cell_type":"markdown","metadata":{"id":"KTtAL3_U6j0S"},"source":["For this example you need to download twitter data from Kaggle: https://www.kaggle.com/kazanova/sentiment140"]},{"cell_type":"markdown","metadata":{"id":"wjfc1e9d80OA"},"source":["Context \\\\\n","\\\n","This is the sentiment140 dataset. It contains 1,600,000 tweets extracted using the twitter api . The tweets have been annotated (0 = negative, 4 = positive) and they can be used to detect sentiment. \\\\\n","\\\n","Content \\\\\n","\\\n","It contains the following 6 fields:\n","* target: the polarity of the tweet (0 = negative, 4 = positive)\n","\n","* ids: The id of the tweet ( 2087)\n","\n","* date: the date of the tweet (Sat May 16 23:58:44 UTC 2009)\n","\n","* flag: The query (lyx). If there is no query, then this value is NO_QUERY.\n","\n","* user: the user that tweeted (robotickilldozr)\n","\n","* text: the text of the tweet (Lyx is cool)\n","\n","Acknowledgements \\\\\n","The official link regarding the dataset with resources about how it was generated is [here](http://%20http//help.sentiment140.com/for-students/) \\\\\n","The official paper detailing the approach is [here](http://bhttp//cs.stanford.edu/people/alecmgo/papers/TwitterDistantSupervision09.pdf)\n","\n","Citation: Go, A., Bhayani, R. and Huang, L., 2009. Twitter sentiment classification using distant supervision. CS224N Project Report, Stanford, 1(2009), p.12."]},{"cell_type":"code","metadata":{"id":"FzXp3Gua1lxV","executionInfo":{"status":"ok","timestamp":1602558605780,"user_tz":-180,"elapsed":9590,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["df = pd.read_csv('/content/drive/My Drive/YouTube/botters_2020-10/twitter_sentiment_course/twitter_data/training.1600000.processed.noemoticon.csv',\n","                 encoding='ISO-8859-1', \n","                 names=[\n","                        'target',\n","                        'id',\n","                        'date',\n","                        'flag',\n","                        'user',\n","                        'text'\n","                        ])"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"XhsfgM9o12-L","executionInfo":{"status":"ok","timestamp":1602558605792,"user_tz":-180,"elapsed":9552,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"7e9cf0bf-285b-41f5-9e21-b46a01cf63fd","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["df.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>flag</th>\n","      <th>user</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1467810369</td>\n","      <td>Mon Apr 06 22:19:45 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>_TheSpecialOne_</td>\n","      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1467810672</td>\n","      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>scotthamilton</td>\n","      <td>is upset that he can't update his Facebook by ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>1467810917</td>\n","      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>mattycus</td>\n","      <td>@Kenichan I dived many times for the ball. Man...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1467811184</td>\n","      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>ElleCTF</td>\n","      <td>my whole body feels itchy and like its on fire</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>1467811193</td>\n","      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>Karoli</td>\n","      <td>@nationwideclass no, it's not behaving at all....</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   target  ...                                               text\n","0       0  ...  @switchfoot http://twitpic.com/2y1zl - Awww, t...\n","1       0  ...  is upset that he can't update his Facebook by ...\n","2       0  ...  @Kenichan I dived many times for the ball. Man...\n","3       0  ...    my whole body feels itchy and like its on fire \n","4       0  ...  @nationwideclass no, it's not behaving at all....\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"gnHNDF2H8qo5"},"source":["We have two classes in the dataset"]},{"cell_type":"code","metadata":{"id":"GrL29pcJ6IWE","executionInfo":{"status":"ok","timestamp":1602558605796,"user_tz":-180,"elapsed":9532,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"2f200e58-012b-4956-ebf3-b455b77fe5bc","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["df.target.unique()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 4])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"ZMQPnCUZdLw_"},"source":["Let's check how equally distributed those classes are."]},{"cell_type":"code","metadata":{"id":"xqUoAbO9awuD","executionInfo":{"status":"ok","timestamp":1602558606055,"user_tz":-180,"elapsed":9769,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"fe0e5872-2921-422c-8d25-b46e70ccc874","colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["classes = df.target.unique()\n","counts = []\n","\n","for i in classes:\n","  count = len(df[df.target==i])\n","  counts.append(count)\n","\n","plt.bar(['negative', 'positive'], counts)\n","plt.show()"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"_Z8YvAWgdQsK"},"source":["Even class distribution helps us a lot in text classifiction. Imagine a situation where 95% of data is in one class and the rest 5% is split among other 5 classes. If we wouldn't do anything about it model would just learn to guess the 95% class all the time and would be correct 95% of the time on the data we would use."]},{"cell_type":"markdown","metadata":{"id":"_E8moCv-mbSe"},"source":["To start modelling we still need to do a couple of things:\n","\n","1.   Split data into train and test datasets\n","2.   Tokenize it\n","3.   Pad the text\n","4.   Encode the labels\n","\n"]},{"cell_type":"markdown","metadata":{"id":"r7t3WHSIoZiS"},"source":["## Train/test split"]},{"cell_type":"markdown","metadata":{"id":"x9mheNP29Yjt"},"source":["We don't really need all 1.6 Million tweets for training so we can take a sample of 10% and then split taht into 80% for training and 20% for testing."]},{"cell_type":"code","metadata":{"id":"_ppqSW1N7mIt","executionInfo":{"status":"ok","timestamp":1602558606061,"user_tz":-180,"elapsed":9768,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["sample_size = int(len(df)*0.1)\n","sampleDf = df.sample(sample_size, random_state=23)\n","x = sampleDf.text.values\n","y = sampleDf.target.values\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=32)"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5wopVEhDOY1F"},"source":["## Tokenization\n","What we need to do now is to tokenize text (essentialy turning words into tokens). The difference from vectorization that we used in Linear Regression notebook is that we do not count each token occurence in the text. Instead we just turn words into tokens and that's about it. Comparing this to Logistic Regression (LR) example you'll see that in this method we keep the order of the words intact, while, in the LR example we loose that information."]},{"cell_type":"code","metadata":{"id":"A1QGfFgQ-Rpy","executionInfo":{"status":"ok","timestamp":1602558610372,"user_tz":-180,"elapsed":14075,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(x_train)\n","\n","X_train = tokenizer.texts_to_sequences(x_train)\n","X_test = tokenizer.texts_to_sequences(x_test)\n","\n","vocab_size = len(tokenizer.word_index) + 1  # Adding 1 because of reserved 0 index"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LtJV4JBUOsyc"},"source":["Our tokenized dataset will essentially consist of index of each word that is used in training dataset. We can check how it looks by simply printing the first tweet both as it was and after tokenization."]},{"cell_type":"code","metadata":{"id":"iUlYC1mkRuMt","executionInfo":{"status":"ok","timestamp":1602558610381,"user_tz":-180,"elapsed":14068,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"532512fe-af8c-44d1-cf8e-3a17488d05fe","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(x_train[0])\n","print(X_train[0])"],"execution_count":9,"outputs":[{"output_type":"stream","text":["@teefy1983 aww my poor mexican!!! He no feel good at all \n","[33672, 361, 5, 351, 3268, 113, 37, 110, 28, 23, 31]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1_4Ocpt1ohGP"},"source":["## Padding\n","Before modelling we want to make sure our inputs are the same size, since we are using neural network with a fixed input size. \\\\\n","First we figure out the max len."]},{"cell_type":"code","metadata":{"id":"LyDETieLoucQ","executionInfo":{"status":"ok","timestamp":1602558610386,"user_tz":-180,"elapsed":14055,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"f4490009-f9af-433b-e706-047ffbb7c6b1","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["lens_train = [len(i) for i in X_train]\n","lens_test = [len(i) for i in X_test]\n","lens = lens_train + lens_test\n","\n","maxlen = np.max(lens)\n","\n","print('Max len:', maxlen)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Max len: 118\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DLwovzmrpFQB"},"source":["Then we pad our inputs to fit that size."]},{"cell_type":"code","metadata":{"id":"2n1-CNwTpNF9","executionInfo":{"status":"ok","timestamp":1602558611247,"user_tz":-180,"elapsed":14911,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["X_train = pad_sequences(X_train, padding='post', maxlen=maxlen)\n","X_test = pad_sequences(X_test, padding='post', maxlen=maxlen)"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dXkNGdGXpebb"},"source":["## Label Encoding"]},{"cell_type":"markdown","metadata":{"id":"Nm167nTwprAv"},"source":["We could get away with other approach but you might want to use this for more than binary classification."]},{"cell_type":"code","metadata":{"id":"NdvqxTMYpnqX","executionInfo":{"status":"ok","timestamp":1602558611255,"user_tz":-180,"elapsed":14914,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["encoder = LabelEncoder()\n","encoder.fit(y)\n","encoded_Y_test = encoder.transform(y_test)\n","encoded_Y_train = encoder.transform(y_train)\n","\n","# convert integers to dummy variables (i.e. one hot encoded)\n","dummy_y_test = np_utils.to_categorical(encoded_Y_test)\n","dummy_y_train = np_utils.to_categorical(encoded_Y_train)"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jiGcqcLLPnCq"},"source":["# Modelling\n","The model that we use here is a simple Neural Network. I'll add some comments to explain what each line does."]},{"cell_type":"code","metadata":{"id":"SRc8JH-S-fBl","executionInfo":{"status":"ok","timestamp":1602559279460,"user_tz":-180,"elapsed":518,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"c1740704-842c-48d7-e909-ef2b3da07223","colab":{"base_uri":"https://localhost:8080/","height":459}},"source":["embedding_dim = 100  # neurons in the first layer after input, essentially a 100 numbers vector which represents the input tweet\n","\n","model = Sequential()  # initiates the model\n","model.add(layers.Embedding(input_dim=vocab_size,  # adds the first [input] layer which will be our tokenized tweets\n","                          output_dim=embedding_dim,  # the embedding of that tweet, essentially inputs output\n","                          input_length=maxlen))  # size of the input layer determined by maxlen calculated before\n","model.add(layers.Dropout(0.2))  # dorpouts are added to help with overtraining, essentially \"turns off\" said amount of neurons before giving information to the next layer\n","model.add(layers.GlobalMaxPool1D())  # https://computersciencewiki.org/index.php/Max-pooling_/_Pooling\n","model.add(layers.Dropout(0.2))\n","model.add(layers.Dense(50, activation='relu'))  # additional hidden layer\n","model.add(layers.Dropout(0.2))\n","model.add(layers.Dense(50, activation='relu'))\n","model.add(layers.Dropout(0.2))\n","model.add(layers.Dense(2, activation='softmax'))  # prediction layer, 2 is the number of classes we have\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","model.summary()"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 118, 100)          11789900  \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 118, 100)          0         \n","_________________________________________________________________\n","global_max_pooling1d_1 (Glob (None, 100)               0         \n","_________________________________________________________________\n","dropout_5 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 50)                5050      \n","_________________________________________________________________\n","dropout_6 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 50)                2550      \n","_________________________________________________________________\n","dropout_7 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 2)                 102       \n","=================================================================\n","Total params: 11,797,602\n","Trainable params: 11,797,602\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9OdXHctIZmeI"},"source":["So we have our model. All we need now is to train it."]},{"cell_type":"code","metadata":{"id":"rhJt6HHXsEL9","executionInfo":{"status":"ok","timestamp":1602559860253,"user_tz":-180,"elapsed":573621,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"ecaeccc8-995b-48ef-c43b-36f76652f899","colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["history = model.fit(X_train, dummy_y_train,\n","                    epochs=5,  # times model will run through the data\n","                    verbose=True,\n","                    validation_data=(X_test, dummy_y_test),\n","                    batch_size=128)  # data is set to batches we are sent to the model to predict, imagine each batc as a step in which model tries to predict the class and then checks the right answer and corrects it's weights with backpropogation\n","loss, accuracy = model.evaluate(X_train, dummy_y_train, verbose=False)\n","print(\"Training Accuracy: {:.4f}\".format(accuracy))\n","loss, accuracy = model.evaluate(X_test, dummy_y_test, verbose=False)\n","print(\"Testing Accuracy:  {:.4f}\".format(accuracy))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","1000/1000 [==============================] - 112s 112ms/step - loss: 0.5180 - accuracy: 0.7381 - val_loss: 0.4481 - val_accuracy: 0.7892\n","Epoch 2/5\n","1000/1000 [==============================] - 112s 112ms/step - loss: 0.4047 - accuracy: 0.8149 - val_loss: 0.4519 - val_accuracy: 0.7871\n","Epoch 3/5\n","1000/1000 [==============================] - 113s 113ms/step - loss: 0.3322 - accuracy: 0.8529 - val_loss: 0.4745 - val_accuracy: 0.7849\n","Epoch 4/5\n","1000/1000 [==============================] - 113s 113ms/step - loss: 0.2731 - accuracy: 0.8846 - val_loss: 0.4991 - val_accuracy: 0.7775\n","Epoch 5/5\n","1000/1000 [==============================] - 112s 112ms/step - loss: 0.2264 - accuracy: 0.9070 - val_loss: 0.5328 - val_accuracy: 0.7718\n","Training Accuracy: 0.9536\n","Testing Accuracy:  0.7718\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cOlqqrekXqjU"},"source":["Let's have a nice plot of our training process."]},{"cell_type":"code","metadata":{"id":"yGzZxjWN7aoc","executionInfo":{"status":"ok","timestamp":1602559866868,"user_tz":-180,"elapsed":447,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["plt.style.use('ggplot')\n","\n","def plot_history(history):\n","    acc = history.history['accuracy']\n","    val_acc = history.history['val_accuracy']\n","    loss = history.history['loss']\n","    val_loss = history.history['val_loss']\n","    x = range(1, len(acc) + 1)\n","\n","    plt.figure(figsize=(12, 5))\n","    plt.subplot(1, 2, 1)\n","    plt.plot(x, acc, 'b', label='Training acc')\n","    plt.plot(x, val_acc, 'r', label='Validation acc')\n","    plt.title('Training and validation accuracy')\n","    plt.legend()\n","    plt.subplot(1, 2, 2)\n","    plt.plot(x, loss, 'b', label='Training loss')\n","    plt.plot(x, val_loss, 'r', label='Validation loss')\n","    plt.title('Training and validation loss')\n","    plt.legend()"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z6I3hCdk7ciN","executionInfo":{"status":"ok","timestamp":1602559868612,"user_tz":-180,"elapsed":941,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"b3efc66a-1924-4511-fe68-7e50b2cb47de","colab":{"base_uri":"https://localhost:8080/","height":337}},"source":["plot_history(history)"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x360 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"h9Yy3PSlXwKI"},"source":["So there's a couple of interesting things we can see here. Ussually you would see train and validation accuracy both increase over time. Essentially the point where training crosses validation you would want to stop training as it means that model is starting to remember exact things instead of learning patterns, which here is at 2nd epoch. Another thing to take into account is that validation accuracy decreases quite singnificantly over time, instead of growing. Why? Well we have quite a lot of data, so it might very well be that it's enough to have 2 epochs to fully train it before changing learning rate. Essentially, what this shows is that model is rapidly overtraining. If we would remove the dropout layers in the model see ```model.add(layers.Dropout(0.2))``` under [Modeling](#Modelling).\n","\n","**Essentially model is prone to overtrain**\n"]},{"cell_type":"markdown","metadata":{"id":"61h6y03n-6n5"},"source":["#Confussion matrix\n","Before jumping into other models it's always good to check how our model performs in different classes. For that we can use [confussion matrix](https://en.wikipedia.org/wiki/Confusion_matrix).\n","\n","It essentially shows how many times model predicted which class and how many of those times the class it slected was the right one. Here columns are true values and lines are predicted values."]},{"cell_type":"markdown","metadata":{"id":"1IUjrLPUPWEZ"},"source":["So here we need to do it a bit differently from the way we did it in the Logistic Regression notebook. We have encoded our classses using encoder. Here are those classes."]},{"cell_type":"code","metadata":{"id":"N_7cPm0IPWVG","executionInfo":{"status":"ok","timestamp":1602559918992,"user_tz":-180,"elapsed":573,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"bb7dc79b-0b3d-4857-ef35-0f8bb7ab4efb","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["encoder.classes_"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 4])"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"YjRW_WnTaMFq"},"source":["And our predictions are stored as arrays with probabilities fir each class."]},{"cell_type":"code","metadata":{"id":"MN2AB5ntaUeX","executionInfo":{"status":"ok","timestamp":1602559922699,"user_tz":-180,"elapsed":2070,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"63ee07c8-fc25-44cf-9436-fc36dd9738c4","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["y_pred = model.predict(X_test)\n","y_pred"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[9.9997854e-01, 2.1441410e-05],\n","       [9.9106319e-03, 9.9008930e-01],\n","       [8.6809188e-01, 1.3190807e-01],\n","       ...,\n","       [9.7719300e-01, 2.2807015e-02],\n","       [2.2055668e-01, 7.7944338e-01],\n","       [7.6288804e-02, 9.2371124e-01]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"dXjvX2umaYIc"},"source":["Here you can see that we have array of arrays of 2 probabilities for each class. So we need to turn those into classes."]},{"cell_type":"code","metadata":{"id":"y8bi8AFT-qlU","executionInfo":{"status":"ok","timestamp":1602559924234,"user_tz":-180,"elapsed":684,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"2eaef5b2-516e-4050-d0c4-8d95139a5e54","colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["y_predDecoded = [encoder.classes_[np.argmax(i)] for i in y_pred]  # here we get the max probability from those arrays and then based on that select which class is it.\n","cm = confusion_matrix(y_test, y_predDecoded, labels=df.target.unique())  # same confusion matrix code as in Logistic Regression\n","df_cm = pd.DataFrame(cm, index=df.target.unique(), columns=df.target.unique())\n","df_cm"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>12687</td>\n","      <td>3325</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3978</td>\n","      <td>12010</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       0      4\n","0  12687   3325\n","4   3978  12010"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"6Z25Nn0yaOcu"},"source":["For a better understanding you could use percentage expression."]},{"cell_type":"code","metadata":{"id":"kzAdUYAW_F3X","executionInfo":{"status":"ok","timestamp":1602559927989,"user_tz":-180,"elapsed":594,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"e3c6ca47-60ca-4e27-ebfa-f81db64156ac","colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["df_cm_percentage = df_cm.copy()\n","for i in df_cm_percentage:\n","  df_cm_percentage[i]/=df_cm_percentage[i].sum()\n","\n","df_cm_percentage"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.761296</td>\n","      <td>0.216824</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.238704</td>\n","      <td>0.783176</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          0         4\n","0  0.761296  0.216824\n","4  0.238704  0.783176"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"OtcJlPxTa3i7"},"source":["As you can see the results are similar to the Logistic Regression."]},{"cell_type":"markdown","metadata":{"id":"0F3Ay2gNam_x"},"source":["Good, so in the end model learnt to classify both classes about the same. Even though we are using a simple and really overtrained by epoch 10 Neural Network as another base measure to check if the problem is solvable and what results we might expect some insights can be derived here (some the same as LR):\n","\n","1.   Classes are evenly distributed, thus we won't overtrain on one class compared to the other and here we overtrain equally on both :D\n","2.   Neural Network before overtraining and with no learning rate adjustments achieved 80% accuracy, meaning we should be able to get a slightly better result adjusting learning rate and a much better result using language models such as BERT\n","3.   Both classes are predicted equally well\n","\n"]},{"cell_type":"markdown","metadata":{"id":"aQOP0Dx-BCSV"},"source":["# Test"]},{"cell_type":"markdown","metadata":{"id":"iievH-yxBKFb"},"source":["Now we need to check if it actually works. Let's just copy a comment in one of Trump's [tweets](https://twitter.com/realDonaldTrump/status/1315835556081868801). \n","\n","The comment is: \n","PATRIOTIC AMERICANS STAND PROUDLY WITH PRESIDENT TRUMP!!"]},{"cell_type":"code","metadata":{"id":"X2T115aw65gw","executionInfo":{"status":"ok","timestamp":1602560651356,"user_tz":-180,"elapsed":752,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"6c0b5631-8149-4feb-ce51-6e0a55eb33c3","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["tweet = 'PATRIOTIC AMERICANS STAND PROUDLY WITH PRESIDENT TRUMP!!'\n","vectTweet = tokenizer.texts_to_sequences(np.array([tweet]))  # vectorizes the tweet using our vectorizer\n","vectTweet = pad_sequences(vectTweet, padding='post', maxlen=maxlen)  # adds padding\n","\n","prediction = model.predict(vectTweet)  # predicts class of the tweet\n","print('Tweet is', 'positive' if encoder.classes_[np.argmax(prediction)]==4 else 'negative')"],"execution_count":47,"outputs":[{"output_type":"stream","text":["Tweet is positive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fWjPG6n7CPjC"},"source":["Good, so our model is right here. Let's just make sure our model works okay with very specific sentiments."]},{"cell_type":"code","metadata":{"id":"zsKXV4noBvp-","executionInfo":{"status":"ok","timestamp":1602560752552,"user_tz":-180,"elapsed":681,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"d6759e92-80fb-432c-80a5-741de47b8850","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["tweetList = ['Best tweet ever!', 'Mondays are the worst...']\n","vectTweet = tokenizer.texts_to_sequences(np.array(tweetList))  # vectorizes the tweet using our vectorizer\n","vectTweet = pad_sequences(vectTweet, padding='post', maxlen=maxlen)  # adds padding\n","\n","prediction = model.predict(vectTweet)  # predicts class of the tweet\n","for enum, i in enumerate(tweetList):\n","  print(i, '| This tweet is', 'positive' if encoder.classes_[np.argmax(prediction[enum])]==4 else 'negative')"],"execution_count":50,"outputs":[{"output_type":"stream","text":["Best tweet ever! | This tweet is positive\n","Mondays are the worst... | This tweet is negative\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C6PYQxT2C5Ph"},"source":[""],"execution_count":null,"outputs":[]}]}